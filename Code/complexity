import random
# import math
# import numpy as np
from mpmath import *
import matplotlib.pyplot as plt
f = open("test.txt", "r")
input_file = f.readline()
lst9=[]
lst10=[]
input_file_line_elements = input_file.split()
lst8=[]
number_of_cells = input_file_line_elements[0]
number_of_connections = input_file_line_elements[1]
row = int(input_file_line_elements[2])
column = int(input_file_line_elements[3])

# print(number_of_cells, number_of_connections, row, column)

input_file1 = f.readlines()
lst4 = []
s = 1
for s in input_file1:
    lst3 = []
    ele = s.split()
    for h in range(1, len(ele)):
        lst3.append(ele[h])
    # print("Net's cells list", lst3)
    lst4.append(lst3)

print("lst4",lst4)
lst5=[]
lst7=[]
for i in range(int(number_of_cells)):
    lst5.append(i)
print("lst5", lst5)
for i in lst5:
    lst6 = []
    for j in range(len(lst4)):
        for s in range(len(lst4[j])):
            if i==int(lst4[j][s]):
                lst6.append(j)
    # print("lst6",lst6)
#     Mapping every cells to the nets it appears at
    lst7.append([i,lst6])
print("lst7",lst7)


grid = [['--' for i in range(column)] for j in range(row)]

cells = []

for i in range(int(number_of_cells)):
    cells.append([i, 0, 0])
    # cells.append(i)


# print(cells)

for cell in cells:
    cell_row = random.randint(0, row - 1)
    cell_column = random.randint(0, column - 1)

    if grid[cell_row][cell_column] == '--':

        cell[1] = cell_row
        cell[2] = cell_column

        grid[cell_row][cell_column] = cell

    else:
        while grid[cell_row][cell_column] != '--':
            cell_row = random.randint(0, row - 1)
            cell_column = random.randint(0, column - 1)

        cell[1] = cell_row
        cell[2] = cell_column
        grid[cell_row][cell_column] = cell

print("initial placement")
for i in range(row):
    for j in range(column):
        if grid[i][j] != '--':
            [c, x, y] = grid[i][j]
            print(c, end=' ')
        else:
            print('--', end=' ')
    print()


# for i in range(len(lst4)):
#     for j in range(len(cells)):
print()
wl = 0

for i in lst4:
    co_x = []
    co_y = []
    for j in range(len(i)):

        for k in range(len(cells)):
            [c, x, y] = cells[k]
            if c == int(i[j]):
                co_x.append(x)
                co_y.append(y)
    wl = wl + (max(co_x) - min(co_x)) + (max(co_y) - min(co_y))

print("wire length: ", wl)

f.close()

initial_wl = wl

initial_temp = 500 * initial_wl
final_temp = 0.000005 * initial_temp / float(number_of_connections)
current_temp = initial_temp
next_temp = 0.95 * current_temp
moves_per_temp = 10 * int(number_of_cells)
count_moves = 0


while current_temp > final_temp:

    rand_cell1_index = random.randint(0, len(cells) - 1)
    rand_cell2_index = random.randint(0, len(cells) - 1)
# rand_cell1 = random.choice(cells)
# rand_cell2 = random.choice(cells)

# while rand_cell1_index == rand_cell2_index:
#     rand_cell2_index = random.randint(0, len(cells) - 1)

    [c1, x1, y1] = cells[rand_cell1_index]
    [c2, x2, y2] = cells[rand_cell2_index]

    temp_cell = cells[rand_cell1_index][0]
    cells[rand_cell1_index][0] = cells[rand_cell2_index][0]
    cells[rand_cell2_index][0] = temp_cell
    swapped_wl = 0
    # print("cell", cells[rand_cell1_index][0])
    # print("cell", cells[rand_cell2_index][0])

for i in lst7:
    if int(cells[rand_cell1_index][0]) == int(i[0]):
        lst8.append(i[1])
    if int(cells[rand_cell2_index][0]) == int(i[0]):
        lst8.append(i[1])
print("lst8:", lst8)
for i in range(len(lst8)):
    for j in range(len(lst8[i])):
        lst9.append(lst8[i][j])
print("lst999", lst9)
if lst9:
    lst9.sort()
    last = lst9[-1]
    for i in range(len(lst9)-2, -1, -1):
        if last == lst9[i]:
            del lst9[i]
        else:
            last = lst9[i]

# Quicker if all elements are hashables:
mylist = list(set(lst9))
print(mylist)

# mapping the nets indeces to their values
for i in lst9:
    for j in range(len(lst4)):
        if i==j:
            lst10.append(lst4[j])
print(lst10)

for i in lst10:
    co_x = []
    co_y = []
    for j in range(len(i)):
        for k in range(len(cells)):
            [c, x, y] = cells[k]
            if c == int(i[j]):
                co_x.append(x)
                co_y.append(y)
    swapped_wl = swapped_wl + (max(co_x) - min(co_x)) + (max(co_y) - min(co_y))

# print(swapped_wl)

delta_wl = wl - swapped_wl
p = random.uniform(0, 1)
e = exp((delta_wl / current_temp))
# print("probability to accept ", p)

# scheduling temperature
if delta_wl > 0:
    wl = swapped_wl
elif p < e:
    wl = swapped_wl
else:
    temp_cell = cells[rand_cell1_index][0]
    cells[rand_cell1_index][0] = cells[rand_cell2_index][0]
    cells[rand_cell2_index][0] = temp_cell


if count_moves >= moves_per_temp:
    count_moves = 0
    current_temp = next_temp
    next_temp = 0.95 * current_temp
else:
    count_moves = count_moves + 1

print()
print("final placement: ")
for i in range(row):
    for j in range(column):
        if grid[i][j] != '--':
            [c, x, y] = grid[i][j]
            print(c, end=' ')
        else:
            print('--', end=' ')
    print()

print()
print("wire length: ", wl)

# print(cells)
# while current_temp > final_temp:
